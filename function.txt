	socket()
//      int socket(int domain, int type, int protocol);
//      socket() creates an endpoint for communication and returns a descriptor.

	bind()
//      int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
//      When a socket is created, it exists in a name space (address family) but
//      has no address assigned to it.  bind() assigns the address specified by 
//      addr to the socket referred to by the file descriptor sockfd.  addrlen 
//      specifies the size, in bytes, of the address structure pointed to by addr.

	close()
//      int close(int fd);
//      close() closes a file descriptor, so that it no longer refers to any
//      file and may be reused.

	freeaddrinfo()
//      The freeaddrinfo() function frees the memory that was allocated for
//      the dynamically allocated linked list res.

	revcfrom()
//      ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,
//              struct sockaddr *src_addr, socklen_t *addrlen);
//      The recv(), recvfrom(), and recvmsg() calls are used to receive
//      messages from a socket.  They may be used to receive data on both
//      connectionless and connection-oriented sockets.
//      All three calls return the length of the message on successful
//      completion.  If a message is too long to fit in the supplied buffer,
//      excess bytes may be discarded depending on the type of socket the
//      message is received from.

	NI_MAXHOST, NI_MAXSERV
//      In order to assist the programmer in choosing reasonable sizes for
//      the supplied buffers, <netdb.h> defines the constants
//      #define NI_MAXHOST      1025
//      #define NI_MAXSERV      32

	getnameinfo()
//      int getnameinfo(const struct sockaddr *sa, socklen_t salen, char *host, socklen_t hostlen,
//              char *serv, socklen_t servlen, int flags);
//      The getnameinfo() function is the inverse of getaddrinfo(3): it
//      converts a socket address to a corresponding host and service, in a
//      protocol-independent manner.

	strlen()
//      size_t strlen(const char *s);
//      The strlen() function calculates the length of the string s, excluding the
//      terminating null byte ('\0'). 


	sendto()
//      ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,
//              const struct sockaddr *dest_addr, socklen_t addrlen);
//      The system calls send(), sendto(), and sendmsg() are used to transmit a 
//      message to another socket. The send() call may be used only when the socket
//      is in a connected state

	write()
//      ssize_t write(int fd, const void *buf, size_t count);
//      write() writes up to count bytes from the buffer pointed buf to the file referred
//      to by the file descriptor fd.

	read()
//      ssize_t read(int fd, void *buf, size_t count);
//      read() attempts to read up to count bytes from file descriptor fd into the buffer
//      starting at buf.

	sigemptyset()
//	int sigemptyset(sigset_t *set);
//	sigemptyset() initializes the signal set given by set to empty, with
//	all signals excluded from the set.

	setsockopt()
//	int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);
//	getsockopt() and setsockopt() manipulate options for the socket referred 
//	to by the file descriptor sockfd.  Options may exist at multiple protocol
//	levels; they are always present at the uppermost socket level.

	sigaction()
//      int sigaction(int signum, const struct sigaction *act,struct sigaction *oldact);
//      The sigaction() system call is used to change the action taken by a process on 
//      receipt of a specific signal.
//      struct sigaction {
//		void     (*sa_handler)(int);
//		void     (*sa_sigaction)(int, siginfo_t *, void *);
//		sigset_t   sa_mask;
//      	int        sa_flags;
//		void     (*sa_restorer)(void);
//	};

	INET6_ADDRSTRLEN
//	#define INET6_ADDRSTRLEN 46

	struct addrinfo
//	The addrinfo structure used by getaddrinfo() contains the following
//	fields:
//	struct addrinfo {
//		int              ai_flags;
//		int              ai_family;
//		int              ai_socktype;
//		int              ai_protocol;
//		socklen_t        ai_addrlen;
//		struct sockaddr *ai_addr;
//		char            *ai_canonname;
//		struct addrinfo *ai_next;
//	};














